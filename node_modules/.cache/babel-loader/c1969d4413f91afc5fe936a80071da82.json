{"ast":null,"code":"import _typeof from \"/DATA/html/9/vue-vuetify-router-axios/news/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { attachedRoot } from '../../util/dom';\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n\n  var root = attachedRoot(el);\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (_typeof(binding.value) === 'object' && binding.value.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  return !elements.some(function (el) {\n    return el.contains(e.target);\n  });\n}\n\nfunction checkIsActive(e, binding) {\n  var isActive = _typeof(binding.value) === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\n\nfunction directive(e, el, binding, vnode) {\n  var handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(function () {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\n\nfunction handleShadow(el, callback) {\n  var root = attachedRoot(el);\n  callback(document);\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding, vnode) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding, vnode);\n    };\n\n    var onMousedown = function onMousedown(e) {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n\n    handleShadow(el, function (app) {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true\n      };\n    }\n\n    el._clickOutside[vnode.context._uid] = {\n      onClick: onClick,\n      onMousedown: onMousedown\n    };\n  },\n  unbind: function unbind(el, binding, vnode) {\n    if (!el._clickOutside) return;\n    handleShadow(el, function (app) {\n      var _el$_clickOutside;\n\n      if (!app || !((_el$_clickOutside = el._clickOutside) != null && _el$_clickOutside[vnode.context._uid])) return;\n      var _el$_clickOutside$vno = el._clickOutside[vnode.context._uid],\n          onClick = _el$_clickOutside$vno.onClick,\n          onMousedown = _el$_clickOutside$vno.onMousedown;\n      app.removeEventListener('click', onClick, true);\n      app.removeEventListener('mousedown', onMousedown, true);\n    });\n    delete el._clickOutside[vnode.context._uid];\n  }\n};\nexport default ClickOutside;","map":{"version":3,"sources":["../../../src/directives/click-outside/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { attachedRoot } from '../../util/dom'\nimport { VNodeDirective } from 'vue/types/vnode'\nimport { VNode } from 'vue'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: ((e: Event) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (\n    typeof ShadowRoot !== 'undefined' &&\n    root instanceof ShadowRoot &&\n    root.host === e.target\n  ) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: PointerEvent, binding: ClickOutsideDirective): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document)\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding, vnode)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as PointerEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true,\n      }\n    }\n\n    el._clickOutside[vnode.context!._uid] = {\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unbind (el: HTMLElement, binding: ClickOutsideDirective, vnode: VNode) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside?.[vnode.context!._uid]) return\n\n      const { onClick, onMousedown } = el._clickOutside[vnode.context!._uid]!\n\n      app.removeEventListener('click', onClick, true)\n      app.removeEventListener('mousedown', onMousedown, true)\n    })\n\n    delete el._clickOutside[vnode.context!._uid]\n  },\n}\n\nexport default ClickOutside\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}