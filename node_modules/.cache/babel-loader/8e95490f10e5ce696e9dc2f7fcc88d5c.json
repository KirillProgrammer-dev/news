{"ast":null,"code":"import _defineProperty from \"/Users/marinatells/Coding/promweb/lesson14/vue-vuetify-router-axios/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/marinatells/Coding/promweb/lesson14/vue-vuetify-router-axios/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport Vue from 'vue';\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'roundable',\n  props: {\n    rounded: [Boolean, String],\n    tile: Boolean\n  },\n  computed: {\n    roundedClasses: function roundedClasses() {\n      var composite = [];\n      var rounded = typeof this.rounded === 'string' ? String(this.rounded) : this.rounded === true;\n\n      if (this.tile) {\n        composite.push('rounded-0');\n      } else if (typeof rounded === 'string') {\n        var values = rounded.split(' ');\n\n        var _iterator = _createForOfIteratorHelper(values),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var value = _step.value;\n            composite.push(\"rounded-\".concat(value));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (rounded) {\n        composite.push('rounded');\n      }\n\n      return composite.length > 0 ? _defineProperty({}, composite.join(' '), true) : {};\n    }\n  }\n});","map":{"version":3,"sources":["../../../src/mixins/roundable/index.ts"],"names":[],"mappings":";;;;;AAAA,OAAA,GAAA,MAAA,KAAA;AAEA;;AACA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,WAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE,CAAA,OAAA,EADJ,MACI,CADJ;AAEL,IAAA,IAAI,EAAE;AAFD,GAHiB;AAQxB,EAAA,QAAQ,EAAE;AACR,IAAA,cADQ,4BACM;AACZ,UAAM,SAAS,GAAf,EAAA;AACA,UAAM,OAAO,GAAG,OAAO,KAAP,OAAA,KAAA,QAAA,GACZ,MAAM,CAAC,KADK,OACN,CADM,GAEZ,KAAA,OAAA,KAFJ,IAAA;;AAIA,UAAI,KAAJ,IAAA,EAAe;AACb,QAAA,SAAS,CAAT,IAAA,CAAA,WAAA;AADF,OAAA,MAEO,IAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AACtC,YAAM,MAAM,GAAG,OAAO,CAAP,KAAA,CAAf,GAAe,CAAf;;AADsC,mDAGtC,MAHsC;AAAA;;AAAA;AAGtC,8DAA4B;AAAA,gBAA5B,KAA4B;AAC1B,YAAA,SAAS,CAAT,IAAA,mBAAA,KAAA;AACD;AALqC;AAAA;AAAA;AAAA;AAAA;AAAjC,OAAA,MAMA,IAAA,OAAA,EAAa;AAClB,QAAA,SAAS,CAAT,IAAA,CAAA,SAAA;AACD;;AAED,aAAO,SAAS,CAAT,MAAA,GAAA,CAAA,uBACJ,SAAS,CAAT,IAAA,CAAD,GAAC,CADI,EACkB,IADlB,IAAP,EAAA;AAGD;AAtBO;AARc,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\n\n/* @vue/component */\nexport default Vue.extend({\n  name: 'roundable',\n\n  props: {\n    rounded: [Boolean, String],\n    tile: Boolean,\n  },\n\n  computed: {\n    roundedClasses (): Record<string, boolean> {\n      const composite = []\n      const rounded = typeof this.rounded === 'string'\n        ? String(this.rounded)\n        : this.rounded === true\n\n      if (this.tile) {\n        composite.push('rounded-0')\n      } else if (typeof rounded === 'string') {\n        const values = rounded.split(' ')\n\n        for (const value of values) {\n          composite.push(`rounded-${value}`)\n        }\n      } else if (rounded) {\n        composite.push('rounded')\n      }\n\n      return composite.length > 0 ? {\n        [composite.join(' ')]: true,\n      } : {}\n    },\n  },\n})\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}