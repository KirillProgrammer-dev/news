{"ast":null,"code":"// Directives\nimport Intersect from '../../directives/intersect'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\nexport default function intersectable(options) {\n  return Vue.extend({\n    name: 'intersectable',\n    data: function data() {\n      return {\n        isIntersecting: false\n      };\n    },\n    mounted: function mounted() {\n      Intersect.inserted(this.$el, {\n        name: 'intersect',\n        value: this.onObserve\n      }, this.$vnode);\n    },\n    destroyed: function destroyed() {\n      Intersect.unbind(this.$el, {\n        name: 'intersect',\n        value: this.onObserve\n      }, this.$vnode);\n    },\n    methods: {\n      onObserve: function onObserve(entries, observer, isIntersecting) {\n        this.isIntersecting = isIntersecting;\n        if (!isIntersecting) return;\n\n        for (var i = 0, length = options.onVisible.length; i < length; i++) {\n          var callback = this[options.onVisible[i]];\n\n          if (typeof callback === 'function') {\n            callback();\n            continue;\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options');\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/mixins/intersectable/index.ts"],"names":[],"mappings":"AAAA;AACA,OAAA,SAAA,MAAA,4BAAA,C,CAEA;;AACA,SAAA,WAAA,QAAA,oBAAA,C,CAEA;;AACA,OAAA,GAAA,MAAA,KAAA;AAEA,eAAc,SAAA,aAAA,CAAA,OAAA,EAAyD;AACrE,SAAO,GAAG,CAAH,MAAA,CAAW;AAChB,IAAA,IAAI,EADY,eAAA;AAGhB,IAAA,IAAI,EAAE;AAAA,aAAO;AACX,QAAA,cAAc,EAAE;AADL,OAAP;AAAA,KAHU;AAOhB,IAAA,OAPgB,qBAOT;AACL,MAAA,SAAS,CAAT,QAAA,CAAmB,KAAnB,GAAA,EAA4C;AAC1C,QAAA,IAAI,EADsC,WAAA;AAE1C,QAAA,KAAK,EAAE,KAAK;AAF8B,OAA5C,EAGG,KAHH,MAAA;AARc,KAAA;AAchB,IAAA,SAdgB,uBAcP;AACP,MAAA,SAAS,CAAT,MAAA,CAAiB,KAAjB,GAAA,EAA0C;AACxC,QAAA,IAAI,EADoC,WAAA;AAExC,QAAA,KAAK,EAAE,KAAK;AAF4B,OAA1C,EAGG,KAHH,MAAA;AAfc,KAAA;AAqBhB,IAAA,OAAO,EAAE;AACP,MAAA,SADO,qBACE,OADF,EACE,QADF,EACE,cADF,EACiG;AACtG,aAAA,cAAA,GAAA,cAAA;AAEA,YAAI,CAAJ,cAAA,EAAqB;;AAErB,aAAK,IAAI,CAAC,GAAL,CAAA,EAAW,MAAM,GAAG,OAAO,CAAP,SAAA,CAAzB,MAAA,EAAmD,CAAC,GAApD,MAAA,EAA+D,CAA/D,EAAA,EAAoE;AAClE,cAAM,QAAQ,GAAI,KAAa,OAAO,CAAP,SAAA,CAA/B,CAA+B,CAAb,CAAlB;;AAEA,cAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAClC,YAAA,QAAQ;AACR;AACD;;AAED,UAAA,WAAW,CAAC,OAAO,CAAP,SAAA,CAAA,CAAA,IAAZ,wFAAW,CAAX;AACD;AACF;AAhBM;AArBO,GAAX,CAAP;AAwCD","sourcesContent":["// Directives\nimport Intersect from '../../directives/intersect'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\nexport default function intersectable (options: { onVisible: string[] }) {\n  return Vue.extend({\n    name: 'intersectable',\n\n    data: () => ({\n      isIntersecting: false,\n    }),\n\n    mounted () {\n      Intersect.inserted(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      }, this.$vnode)\n    },\n\n    destroyed () {\n      Intersect.unbind(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      }, this.$vnode)\n    },\n\n    methods: {\n      onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n        this.isIntersecting = isIntersecting\n\n        if (!isIntersecting) return\n\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = (this as any)[options.onVisible[i]]\n\n          if (typeof callback === 'function') {\n            callback()\n            continue\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options')\n        }\n      },\n    },\n  })\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}