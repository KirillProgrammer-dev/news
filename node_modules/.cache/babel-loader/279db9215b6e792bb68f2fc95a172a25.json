{"ast":null,"code":"// Mixins\nimport { inject } from '../../mixins/registrable'; // Utilities\n\nimport { convertToUnit } from '../../util/helpers';\nimport { easeInOutCubic } from '../../services/goto/easing-patterns';\nvar base = inject('VAppBar', 'v-app-bar-title', 'v-app-bar');\nexport default base.extend().extend({\n  name: 'v-app-bar-title',\n  data: function data() {\n    return {\n      contentWidth: 0,\n      left: 0,\n      width: 0\n    };\n  },\n  watch: {\n    '$vuetify.breakpoint.width': 'updateDimensions'\n  },\n  computed: {\n    styles: function styles() {\n      if (!this.contentWidth) return {};\n      var min = this.width;\n      var max = this.contentWidth;\n      var ratio = easeInOutCubic(Math.min(1, this.VAppBar.scrollRatio * 1.5));\n      return {\n        width: convertToUnit(min + (max - min) * ratio),\n        visibility: this.VAppBar.scrollRatio ? 'visible' : 'hidden'\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.updateDimensions();\n  },\n  methods: {\n    updateDimensions: function updateDimensions() {\n      var dimensions = this.$refs.placeholder.getBoundingClientRect();\n      this.width = dimensions.width;\n      this.left = dimensions.left;\n      this.contentWidth = this.$refs.content.scrollWidth;\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      class: 'v-toolbar__title v-app-bar-title'\n    }, [h('div', {\n      class: 'v-app-bar-title__content',\n      style: this.styles,\n      ref: 'content'\n    }, [this.$slots.default]), h('div', {\n      class: 'v-app-bar-title__placeholder',\n      style: {\n        visibility: this.VAppBar.scrollRatio ? 'hidden' : 'visible'\n      },\n      ref: 'placeholder'\n    }, [this.$slots.default])]);\n  }\n});","map":{"version":3,"sources":["../../../src/components/VAppBar/VAppBarTitle.ts"],"names":[],"mappings":"AAAA;AACA,SAAA,MAAA,QAAA,0BAAA,C,CAOA;;AACA,SAAA,aAAA,QAAA,oBAAA;AACA,SAAA,cAAA,QAAA,qCAAA;AAEA,IAAM,IAAI,GAAG,MAAM,CAAA,SAAA,EAAA,iBAAA,EAAnB,WAAmB,CAAnB;AASA,eAAe,IAAI,CAAJ,MAAA,GAAA,MAAA,CAA8B;AAC3C,EAAA,IAAI,EADuC,iBAAA;AAG3C,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,YAAY,EADD,CAAA;AAEX,MAAA,IAAI,EAFO,CAAA;AAGX,MAAA,KAAK,EAAE;AAHI,KAAP;AAAA,GAHqC;AAS3C,EAAA,KAAK,EAAE;AACL,iCAA6B;AADxB,GAToC;AAa3C,EAAA,QAAQ,EAAE;AACR,IAAA,MADQ,oBACF;AACJ,UAAI,CAAC,KAAL,YAAA,EAAwB,OAAA,EAAA;AAExB,UAAM,GAAG,GAAG,KAAZ,KAAA;AACA,UAAM,GAAG,GAAG,KAAZ,YAAA;AACA,UAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAY,KAAA,OAAA,CAAA,WAAA,GAAzC,GAA6B,CAAD,CAA5B;AACA,aAAO;AACL,QAAA,KAAK,EAAE,aAAa,CAAC,GAAG,GAAG,CAAC,GAAG,GAAJ,GAAA,IADtB,KACe,CADf;AAEL,QAAA,UAAU,EAAE,KAAA,OAAA,CAAA,WAAA,GAAA,SAAA,GAAuC;AAF9C,OAAP;AAID;AAXO,GAbiC;AA2B3C,EAAA,OA3B2C,qBA2BpC;AACL,SAAA,gBAAA;AA5ByC,GAAA;AA+B3C,EAAA,OAAO,EAAE;AACP,IAAA,gBADO,8BACS;AACd,UAAM,UAAU,GAAG,KAAA,KAAA,CAAA,WAAA,CAAnB,qBAAmB,EAAnB;AACA,WAAA,KAAA,GAAa,UAAU,CAAvB,KAAA;AACA,WAAA,IAAA,GAAY,UAAU,CAAtB,IAAA;AACA,WAAA,YAAA,GAAoB,KAAA,KAAA,CAAA,OAAA,CAApB,WAAA;AACD;AANM,GA/BkC;AAwC3C,EAAA,MAxC2C,kBAwCrC,CAxCqC,EAwClC;AACP,WAAO,CAAC,CAAA,KAAA,EAAQ;AACd,MAAA,KAAK,EAAE;AADO,KAAR,EAEL,CACD,CAAC,CAAA,KAAA,EAAQ;AACP,MAAA,KAAK,EADE,0BAAA;AAEP,MAAA,KAAK,EAAE,KAFA,MAAA;AAGP,MAAA,GAAG,EAAE;AAHE,KAAR,EAIE,CAAC,KAAA,MAAA,CALH,OAKE,CAJF,CADA,EAMD,CAAC,CAAA,KAAA,EAAQ;AACP,MAAA,KAAK,EADE,8BAAA;AAEP,MAAA,KAAK,EAAE;AACL,QAAA,UAAU,EAAE,KAAA,OAAA,CAAA,WAAA,GAAA,QAAA,GAAsC;AAD7C,OAFA;AAKP,MAAA,GAAG,EAAE;AALE,KAAR,EAME,CAAC,KAAA,MAAA,CAdN,OAcK,CANF,CANA,CAFK,CAAR;AAgBD;AAzD0C,CAA9B,CAAf","sourcesContent":["// Mixins\nimport { inject } from '../../mixins/registrable'\n\n// Types\nimport { VNode } from 'vue'\nimport { ExtractVue } from '../../util/mixins'\nimport VAppBar from './VAppBar'\n\n// Utilities\nimport { convertToUnit } from '../../util/helpers'\nimport { easeInOutCubic } from '../../services/goto/easing-patterns'\n\nconst base = inject<'VAppBar', typeof VAppBar>('VAppBar', 'v-app-bar-title', 'v-app-bar')\n\ninterface options extends ExtractVue<typeof base> {\n  $refs: {\n    content: Element\n    placeholder: Element\n  }\n}\n\nexport default base.extend<options>().extend({\n  name: 'v-app-bar-title',\n\n  data: () => ({\n    contentWidth: 0,\n    left: 0,\n    width: 0,\n  }),\n\n  watch: {\n    '$vuetify.breakpoint.width': 'updateDimensions',\n  },\n\n  computed: {\n    styles (): object {\n      if (!this.contentWidth) return {}\n\n      const min = this.width\n      const max = this.contentWidth\n      const ratio = easeInOutCubic(Math.min(1, this.VAppBar.scrollRatio * 1.5))\n      return {\n        width: convertToUnit(min + (max - min) * ratio),\n        visibility: this.VAppBar.scrollRatio ? 'visible' : 'hidden',\n      }\n    },\n  },\n\n  mounted () {\n    this.updateDimensions()\n  },\n\n  methods: {\n    updateDimensions (): void {\n      const dimensions = this.$refs.placeholder.getBoundingClientRect()\n      this.width = dimensions.width\n      this.left = dimensions.left\n      this.contentWidth = this.$refs.content.scrollWidth\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      class: 'v-toolbar__title v-app-bar-title',\n    }, [\n      h('div', {\n        class: 'v-app-bar-title__content',\n        style: this.styles,\n        ref: 'content',\n      }, [this.$slots.default]),\n      h('div', {\n        class: 'v-app-bar-title__placeholder',\n        style: {\n          visibility: this.VAppBar.scrollRatio ? 'hidden' : 'visible',\n        },\n        ref: 'placeholder',\n      }, [this.$slots.default]),\n    ])\n  },\n})\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}